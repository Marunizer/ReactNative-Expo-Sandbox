  const handleNotification = (notification: Notification) => {

        if (notification.type === 'Show Toast') {
            toast(notification.body);
            //we're done, leave method
            return;
        }

        let currentLocation = getCurrentScreenLocation();
        let onClickNotification;

        //since there's a screen for notifications(assuming it lists them), might as well update content for that screen
        addNotificationForNotificationScreen(notfication); 

        switch (notification.type) {

            case "Account": {

                onClickNotification = () => {
                    push(notification.route);
                }
                break;
            }
            case "Thread": {
                onClickNotification = () => {
                    // Thread is not from user, must be rotued elsewhere, Go there directly!
                    if(notification.route != currentAccount.id) {
                        // (to account, to thread)
                        push(notification.route, notification.route_data); 
                    }
                    else {
                        //we're at home screen, Lets take our place to the account with out entity id of our own, and have the data take us to threads
                        if (currentLocation == 'Home') { push(notification.route, notification.route_data) }

                        while (currentLocation != 'Account' || currentLocation !=  "Thread") {
                            goback();

                            currentLocation = getCurrentScreenLocation();
                            //go to Account from home
                            if (currentLocation == 'Home') { push(notification.route); }
                        }

                        // route here is unecessary if already on Account screen
                        push(notification.route, notification.route_data);
                    }
                }
                break;
            }
            case "Collection": {
                onClickNotification = () => {
                    if(notification.route != currentAccount.id) {
                        push(notification.route, notification.route_data);
                    }
                    else {
                        if (currentLocation == 'Home') { push(notification.route, notification.route_data); }

                        while (currentLocation != 'Account' || currentLocation !=  "Collection") {
                            goback();

                            currentLocation = getCurrentScreenLocation();
                            if (currentLocation == 'Home') { push(notification.route); }
                        }
                        push(notification.route, notification.route_data);
                    }
                }
                break;
            }
            case "Notes": {
                onClickNotification = () => {

                    if (currentLocation == 'Home') { 
                        push(notification.route, notification.route_data);
                    }

                    while (currentLocation != 'Account' || currentLocation !=  "Notes") {
                        goback();

                        currentLocation = getCurrentScreenLocation();
                        if (currentLocation == 'Home') { push(notification.route); }
                    }
                    push(notification.route, notification.route_data);
                }

                break;
            }
            case "Notifications": {
                onClickNotification = () => {

                while (currentLocation != 'Home' || currentLocation !=  "Notifications") {
                    goback();
                    currentLocation = getCurrentScreenLocation();
                }
                push(notification.route);
            }

                break;
            }
            case "default": { 
                
                onClickNotification = () => {
                // take in entity, will atleast direct to Account page that holds the content for notification
                push(notification.route);
            }
                break;
            }
        }

        // pass in content to display notification + the expected function to navigate screens
        renderNotification( notification.content.title, 
        notification.content.body,
        notification.content.icon,
        notification.content.sound,
        notification.content.created, // expected to just display how long ago notificaction was made
        onClickNotification);
  }




  ------------------------------------------------------------------------------------------------------
My model of navigation:
                                                  ---> Threads
                                                  |
        Notifications <---  Home(Feed) ---> Account---> Collections
                                 |                |
                                 |                ---> Notes
                                 V
               {Account/thread/collection on the net, all seeing cloud}



possible reasons to receive notification:

    Account:
    - "user" shared "Account" with you  

    Thread | Collection:
    - "user" liked/commented/shared your thread/Collection -> go to your own thread/Collection
    - "user" shared/posted a new thread/collection, check it out !
    - Thread/Collection liked by someone you're subscribed to is gaining traction, check it out !

    Notes:
    - "user" left a note -> check it

    Notifications:
    - You have X number notifications, see whats up !

Thoughts:

    assuming currentAccount : id is the entity id

    can probably put threads/collection into same case statement

    I kept everything split into cases to have an easier time thinking about their scenarios
